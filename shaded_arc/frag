let fragShader = `
precision highp float;

float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }
float hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }

float noise(vec3 x) {
    const vec3 step = vec3(110, 241, 171);

    vec3 i = floor(x);
    vec3 f = fract(x);
 
    // For performance, compute the base input to a 1D hash from the integer part of the argument and the 
    // incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

    vec3 u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}


float sdArc( in vec2 p, in vec2 sc, in float ra, float rb, float time) {
    // sc is the sin/cos of the arc's aperture
		
    p.x = abs(p.x);
	p.y += 0.5;
    float r = ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : 
                                  abs(length(p)-ra)) - rb;
																	
		vec3 noiseSeed = vec3(5.*p.x, 5.*p.y, time);												
		float ns = 0.03 * noise(noiseSeed);
		return r + ns;
}

varying vec2 vTexCoord;
uniform sampler2D texture;

const int maxParticles = 1000;
uniform int numParticles;
uniform vec2 particles[maxParticles];
uniform float time;

void main() {
	
	/////arc
	vec2 uv = vTexCoord; // x: <0, 1>, y: <0, 1>
	uv *= 2.0;
	uv -= 1.0;
	uv.x *= 2.0;
	
	float tb = 3.14 / 2.0;
	float rb = 0.00;
	vec2  sc = vec2(sin(tb*(1.+sin(time))),cos(tb*(1.+sin(time))));
		
	// distance
	float d = sdArc(uv,sc, 0.7, rb, time);
	d = clamp(d, 0., 2000.);

	vec3 col = vec3(step(0., -d));
	col += clamp(vec3(0.001/d), 0., 1.) * 12.; // add glow
	float maxArcBr = 1.;
  	col *= vec3(maxArcBr*0., maxArcBr*0.5, maxArcBr*1.);

	/////particles
	vec4 color = vec4(vec3(0.0),1.0);
	float brightness = 0.0;
	float maxBrightness = 0.01;
	vec2 speedSum = vec2(0.0);
	
	for (int i = 0 ; i < maxParticles;i++) {
		if (i >= numParticles){break;}
		vec2 p = particles[i];
		p.xy = p.xy*2.0 - 1.0;
		
		float dist = distance(gl_FragCoord.xy,p);
		brightness += maxBrightness/(dist*.001);
		speedSum += 0.0;
	}

	color.r = 0.1*brightness;
	color.b = brightness;
	color.g = 0.5*brightness;
	
	gl_FragColor = color + vec4(col,0.0);
}
`
////////////////////////////////////////////////////////////ATTEMPT TWO//////////////////////////////////////////////////////////
// vec4 color = vec4(vec3(0.0),1.0);
// 	float brightness = 0.0;
// 	float maxBrightness = 0.01;
// 	vec2 speedSum = vec2(0.0);
	
// 	for (int i = 0 ; i < ${maxParticles};i++) {
// 		vec2 p = particles[i];
// 		p.xy = p.xy*2.0 - 1.0;
		
// 		float dist = distance(gl_FragCoord.xy,p);
// 		brightness += maxBrightness/(dist*.001);
// 		speedSum += 0.0;
// 	}

// 	color.r = 0.1*brightness;
// 	color.b = brightness;
// 	color.g = 0.5*brightness;
	
// 	gl_FragColor = color;
// 	//gl_FragColor = vec4(col, 1.0);