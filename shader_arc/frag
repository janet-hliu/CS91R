let fragShader = `
precision highp float;

float M_PI = 3.1415926535897932384626433832795;

float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }
float hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }

float noise(vec3 x) {
    const vec3 step = vec3(110, 241, 171);

    vec3 i = floor(x);
    vec3 f = fract(x);
 
    // For performance, compute the base input to a 1D hash from the integer part of the argument and the 
    // incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

    vec3 u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}
vec2 getArcPoint(in vec2 fragCoords, in float angle, in float aperture, in float rad, 
																		in vec2 p1, 
																		in vec2 p2, 
																		in vec2 origin) {

	vec2 arcPoint;
	if (angle > aperture || angle < 0.) {
		vec2 aperturePoint = vec2(origin.x + rad * cos(aperture), origin.y + rad * sin(aperture));
		if (distance(fragCoords, aperturePoint) > distance(fragCoords, max(p1, p2))) {
			arcPoint = max(p1, p2);
		} else {
			arcPoint = aperturePoint;
		}
	} else {
		arcPoint = vec2(origin.x + rad * cos(angle), origin.y + rad * sin(angle));
	}
	return arcPoint;
}

// [start_int1x, start_int1y, 
// end_int1x, end_int1y, start_int2x, 
// start_int2y, end_int2x, end_int2y, 
// percentage]

float myArc(in vec2 fragCoords, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p4, in float time) {

	//coordinate correction??
	// p1.xy = p1.xy*2.0 - 1.0;
	// p2.xy = p2.xy*2.0 - 1.0;
	// p3.xy = p3.xy*2.0 - 1.0;
	// p4.xy = p4.xy*2.0 - 1.0;
	
	//define radii
	float rad1 = abs(p4.x - p1.x) / 2.0;
	float rad2 = abs(p3.x - p2.x) / 2.0;
	
	float topOfArc = p1.y + rad1;
	vec2 origin = vec2((p4.x + p1.x) / 2.0, p1.y);
	
	//general angle for complete arc
	float angle;
	if (fragCoords.x == origin.x) {
	 	angle = M_PI / 2.;
	} else {
		angle = atan(fragCoords.y - origin.y, fragCoords.x - origin.x);
	}
	
	float aperture = min(M_PI , max(0., 1.*time - 1.));
	vec2 arcPoint1 = getArcPoint(fragCoords, angle, aperture, rad1, p1, p4, origin);
	vec2 arcPoint2 = getArcPoint(fragCoords, angle, aperture, rad2, p2, p3, origin);

	float dist1 = distance(fragCoords, arcPoint1) + 4.;
	float dist2 = distance(fragCoords, arcPoint2) + 4.;
	float minDist = min(dist1, dist2);

	
	if ((dist1 + dist2 <= rad1 - rad2 + 8.01) && (distance(fragCoords, origin) < rad1)
											&& (distance(fragCoords, origin) > rad2)) {						
		if (fragCoords.y > origin.y) {
			float h = 4.;
			float o = h * h / 6.;
			float innerGlow = h * (sqrt(minDist + o) - sqrt(o));
			float effectiveY = fragCoords.y - origin.y;

			float pctIG = - 50. / (effectiveY + 50.) + 1.;
			float pctNorm = 1. - pctIG;

			minDist = pctNorm * minDist + pctIG * innerGlow;
		}

	}
	return minDist;
}

const int maxParticles = 800;
const int maxArcs = 100;
varying vec2 vTexCoord;
uniform sampler2D texture;
uniform int numParticles;
uniform int numArcs;
uniform vec2 particles[maxParticles];
uniform vec4 arcs[maxArcs];
uniform float arcProgress[maxArcs/2];
uniform float time;

void main() {
	// arcs
	float arcBrightness = 0.0;
	float fl_numa = float(numArcs*2);
	float maxArcBr = 0.01 / (0.1*fl_numa + 1.);
	for (int i = 0; i < 1; i++) {
		if (i >= numArcs * 2) {break;}
		vec2 p1 = arcs[i].xy;
		vec2 p2 = arcs[i].zw;
		vec2 p3 = arcs[i + 1].xy;
		vec2 p4 = arcs[i + 1].zw;

		float arcDist = myArc(gl_FragCoord.xy, p1, p3, p4, p2, time);
		arcDist = clamp(arcDist, 0., 2000.);
		arcBrightness += maxArcBr/(arcDist*.001);
	}
	vec4 arcModCol = vec4(arcBrightness*0., arcBrightness*0.6, arcBrightness*.8, 0.0);

	// particles
	// if (gl_FragCoord.y - ) {}
	vec4 partModCol = vec4(0.0,0.0,0.0,1.0);
	float brightness = 0.0;
	float fl_nump = float(numParticles);
	float maxBrightness = 0.01 / (0.1*fl_nump + 1.);
	vec2 speedSum = vec2(0.0);
	
	for (int i = 0 ; i < maxParticles; i++) {
		if (i >= numParticles) {break;}
		vec2 p = particles[i];
		p.xy = p.xy - 1.0;
		
		float dist = distance(gl_FragCoord.xy,p);

		brightness += maxBrightness/(dist*.001);
		speedSum += 0.0;
	}

	partModCol.r = 0.1*brightness;
	partModCol.b = 0.8*brightness;
	partModCol.g = 0.6*brightness;
	
	gl_FragColor = partModCol + arcModCol;

}
`